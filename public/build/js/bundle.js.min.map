{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noResultado","mostrarPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function() {\n    const horas = document.querySelector('#horas');\n\n    if(horas) {\n\n        let busqueda =  {\n            categoria_id: '',\n            dia: ''\n        }\n\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\n        const dias = document.querySelectorAll('[name=\"dia\"]');\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\n\n\n        categoria.addEventListener('change', terminoBusqueda);\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\n\n        function terminoBusqueda(e) {\n            busqueda[e.target.name] = e.target.value;\n\n            // Reiniciar los campos ocultos y el selector de horas\n            inputHiddenHora.value = '';\n\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n            if(horaPrevia) {\n                horaPrevia.classList.remove('horas__hora--seleccionada')\n            }\n\n            if(Object.values(busqueda).includes('')) {\n                return\n            }\n\n            buscarEventos();\n        }\n\n        async function buscarEventos() {\n            const { dia, categoria_id } = busqueda\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\n\n            const resultado = await fetch(url);\n            const eventos = await resultado.json();\n            obtenerHorasDisponibles(eventos);\n        }\n\n\n        function obtenerHorasDisponibles(eventos) {\n            // Reiniciar las horas\n            const listadoHoras = document.querySelectorAll('#horas li');\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'))\n\n            // Comprobar eventos ya tomados, y quitar la variable de deshabilitado\n            const horasTomadas = eventos.map( evento => evento.hora_id);            \n           \n            const listadoHorasArray = Array.from(listadoHoras);\n\n            const resultado = listadoHorasArray.filter( li =>  !horasTomadas.includes(li.dataset.horaId) );\n            resultado.forEach( li => li.classList.remove('horas__hora--deshabilitada'))\n\n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\n            horasDisponibles.forEach( hora => hora.addEventListener('click', seleccionarHora));\n        }\n\n        function seleccionarHora(e) {\n            //Deshabilita la hora previa, si hay un nuevo click\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n            if(horaPrevia) {\n                horaPrevia.classList.remove('horas__hora--seleccionada');\n            }\n\n            //agg clase de seleccionado\n            e.target.classList.add('horas__hora--seleccionada');\n\n            inputHiddenHora.value = e.target.dataset.horaId;\n\n            //Llenar el campo oculto de dia\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\n        }\n    }\n})(); //siempre ; en IFFIE","(function() {\n    const ponentesInput = document.querySelector('#ponentes');\n\n    if(ponentesInput) {\n        let ponentes = [];\n        let ponentesFiltrados = [];\n\n        const listadoPonentes = document.querySelector('#listado-ponentes');\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\n\n        obtenerPonentes();\n\n        ponentesInput.addEventListener('input', buscarPonentes);\n\n        async function obtenerPonentes() {\n            const url= `/api/ponentes`;\n            const respuesta = await fetch(url);\n            const resultado = await respuesta.json();\n\n            formatearPonentes(resultado);\n        }\n\n        function formatearPonentes(arrayPonentes = []) {\n            ponentes = arrayPonentes.map(ponente => {\n                return {\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\n                    id: ponente.id\n                }\n            });\n        }\n\n        function buscarPonentes(e) {\n            const busqueda = e.target.value;\n\n            if(busqueda.length > 2) {\n                //exprecion regular\n                const expresion = new RegExp(busqueda, \"i\");\n                ponentesFiltrados = ponentes.filter(ponente => {\n                    if(ponente.nombre.toLowerCase().search(expresion) != -1) {\n                        return ponente;\n                    }\n                })\n            } else {\n                ponentesFiltrados = []; //para que se elimine el resultado cuando esta vacio el input\n            }\n\n            mostrarPonentes();\n        }\n\n        function mostrarPonentes() {\n\n            while(listadoPonentes.firstChild) {\n                listadoPonentes.removeChild(listadoPonentes.firstChild)\n            } \n\n            if(ponentesFiltrados.length > 0) {\n\n                ponentesFiltrados.forEach(ponente => {\n                    const ponenteHTML = document.createElement('LI');\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\n                    ponenteHTML.textContent = ponente.nombre;\n                    ponenteHTML.dataset.ponenteId = ponente.id\n                    ponenteHTML.onclick = seleccionarPonente\n    \n                    //anadir al DOM\n                    listadoPonentes.appendChild(ponenteHTML);\n                })\n            } else {\n                const noResultado = document.createElement(\"P\");\n                noResultado.classList.add('listado-ponentes__no-resultado');\n                noResultado.textContent = 'No hay resultado para tu busqueda';\n\n                listadoPonentes.appendChild(noResultado);\n            }\n        }\n\n        function seleccionarPonente(e) {\n            const ponente = e.target;\n\n            // Remover la clase previa\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado')\n            if(ponentePrevio) {\n                ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado')\n            }\n            ponente.classList.add('listado-ponentes__ponente--seleccionado')\n\n            ponenteHidden.value = ponente.dataset.ponenteId\n        }\n    }\n})();","(function() {\n    const tagsInput = document.querySelector('#tags_input')\n\n    if(tagsInput) {\n        const tagsDiv = document.querySelector('#tags');\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\n\n        let tags = [];\n\n        //RECUPERAR del input oculto en AREA de EXPERIENCIA\n        if(tagsInputHidden.value!== '') {\n            tags = tagsInputHidden.value.split(','); //convierte el string en  array (arreglos)\n            mostrarTags();\n        }\n\n        // Escuchar los cambios en el input\n        tagsInput.addEventListener('keypress', guardarTag)\n\n        function guardarTag(e) {\n            if(e.keyCode === 44) { // 44 es ,\n\n                if(e.target.value.trim() === '' || e.target.value < 1) {\n                    return;\n                }   \n                e.preventDefault(); //previene el default que borra la ,\n                \n                tags = [...tags, e.target.value.trim()] //arreglo de etiquetas\n                tagsInput.value = '';\n\n                mostrarTags();\n            }\n        }\n\n        function mostrarTags() {\n            tagsDiv.textContent = '';\n            tags.forEach(tag => {\n                const etiqueta = document.createElement('LI');\n                etiqueta.classList.add('formulario__tag');\n                etiqueta.textContent = tag;\n                etiqueta.ondblclick = eliminarTag;\n                tagsDiv.appendChild(etiqueta);\n            })\n\n            actualizarInputHidden();\n        }\n\n        function eliminarTag(e) {\n            e.target.remove();\n\n            tags = tags.filter(tag => tag !== e.target.textContent);\n\n            actualizarInputHidden();\n        }\n\n        function actualizarInputHidden() {\n            tagsInputHidden.value = tags.toString(); //toString, convierte el arreglo en un STRING\n\n        }\n    }\n})() // IIFIE"]}